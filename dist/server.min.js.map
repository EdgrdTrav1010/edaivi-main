{"version":3,"sources":["server.js"],"names":["express","require","Server","createServer","mongoose","cors","path","app","httpServer","io","origin","process","env","NODE_ENV","methods","PORT","MONGODB_URI","User","AudioProject","credentials","StreamSession","AIModel","console","log","_id","email","displayName","role","isVerified","avatar","subscription","plan","usage","aiCredits","comparePassword","regeneratorRuntime","async","_context","prev","next","abrupt","stop","mockUsers","_context2","query","_context3","find","user","findById","id","_context4","prototype","updateAiCredits","amount","_context5","this","save","_context6","category","creditsPerUse","costPerUse","restrictions","minUserLevel","updateUsageStats","_context7","name","description","type","isActive","_context8","_context9","_context10","mockAIModels","filter","model","undefined","isFeatured","_context11","mockAudioProjects","title","owner","isPublic","tracks","duration","bpm","addTrack","track","_context12","push","removeTrack","trackId","t","updateTrack","trackData","index","_context14","findIndex","_objectSpread","export","format","quality","url","concat","fileSize","createdAt","Date","_context16","_context17","_context18","project","aiRoutes","use","FRONTEND_URL","json","limit","urlencoded","extended","join","__dirname","authRoutes","audioRoutes","res","sendFile","get","req","message","version","status","timestamp","toISOString","endpoints","uptime","memory","memoryUsage","environment","connection","readyState","on","socket","roomId","userId","to","emit","update","streamId","event","error","originalUrl","method","availableRoutes","err","stack","listen","repeat","toLocaleString","module","exports"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require('express');\n// const rateLimit = require('express-rate-limit'); // Commented out temporarily\n// const tf = require('@tensorflow/tfjs-node'); // Comment this out temporarily\nconst { Server } = require('socket.io');\nconst { createServer } = require('http');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst path = require('path');\n\n// Initialize Express app\nconst app = express();\nconst httpServer = createServer(app);\nconst io = new Server(httpServer, {\n  cors: {\n    origin: process.env.NODE_ENV === 'production' \n      ? process.env.FRONTEND_URL \n      : ['http://localhost:3000', 'http://localhost:3001'],\n    methods: ['GET', 'POST'],\n    credentials: true\n  }\n});\n\n// Configuration\nconst PORT = process.env.PORT || 8082;\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/edaivi';\n\n// Import models\nconst User = require('./models/User');\nconst AudioProject = require('./models/AudioProject');\nconst VideoProject = require('./models/VideoProject');\nconst Avatar3D = require('./models/Avatar3D');\nconst Scene3D = require('./models/Scene3D');\nconst StreamSession = require('./models/StreamSession');\nconst AIModel = require('./models/AIModel');\n\n// Connect to MongoDB - commented out since MongoDB is not installed\n// mongoose.connect(MONGODB_URI, {\n//   useNewUrlParser: true,\n//   useUnifiedTopology: true\n// })\n// .then(() => {\n//   console.log('📦 MongoDB connected successfully');\n// })\n// .catch(err => {\n//   console.error('❌ MongoDB connection error:', err);\n//   console.log('📦 Continuing without MongoDB for testing');\n// });\nconsole.log('📦 MongoDB connection skipped - using mock data for testing');\n\n// Setup mock data and handlers for testing without MongoDB\nconst mockUsers = [\n  {\n    _id: 'user1',\n    email: 'admin@edaivi.com',\n    displayName: 'Admin User',\n    role: 'admin',\n    isVerified: true,\n    avatar: 'default-avatar.png',\n    subscription: { plan: 'enterprise' },\n    usage: { aiCredits: 1000 },\n    comparePassword: async () => true\n  },\n  {\n    _id: 'user2',\n    email: 'edgrd.88@gmail.com',\n    displayName: 'Developer',\n    role: 'admin',\n    isVerified: true,\n    avatar: 'default-avatar.png',\n    subscription: { plan: 'enterprise' },\n    usage: { aiCredits: 1000 },\n    comparePassword: async () => true\n  }\n];\n\n// Mock find methods for User model\nUser.findOne = async (query) => {\n  if (query.email) {\n    return mockUsers.find(user => user.email === query.email);\n  }\n  return null;\n};\n\nUser.findById = async (id) => {\n  return mockUsers.find(user => user._id === id);\n};\n\n// Add mock methods to User prototype\nUser.prototype.updateAiCredits = async function(amount) {\n  this.usage.aiCredits += amount;\n  return this;\n};\n\nUser.prototype.save = async function() {\n  return this;\n};\n\n// Mock AI models\nconst mockAIModels = [\n  {\n    _id: 'model1',\n    name: 'text-gen-basic',\n    displayName: 'TextGen Basic',\n    description: 'Базовая модель генерации текста',\n    type: 'text-generation',\n    category: 'text',\n    isActive: true,\n    creditsPerUse: 1,\n    costPerUse: 0.01,\n    restrictions: { minUserLevel: 'free' },\n    updateUsageStats: async () => {}\n  },\n  {\n    _id: 'model2',\n    name: 'image-gen-basic',\n    displayName: 'ImageGen Basic',\n    description: 'Базовая модель генерации изображений',\n    type: 'image-generation',\n    category: 'image',\n    isActive: true,\n    creditsPerUse: 2,\n    costPerUse: 0.02,\n    restrictions: { minUserLevel: 'free' },\n    updateUsageStats: async () => {}\n  },\n  {\n    _id: 'model3',\n    name: 'tts-basic',\n    displayName: 'TTS Basic',\n    description: 'Базовая модель преобразования текста в речь',\n    type: 'text-to-speech',\n    category: 'audio',\n    isActive: true,\n    creditsPerUse: 1,\n    costPerUse: 0.01,\n    restrictions: { minUserLevel: 'free' },\n    updateUsageStats: async () => {}\n  }\n];\n\n// Mock methods for AIModel\nAIModel.find = async (query) => {\n  return mockAIModels.filter(model => {\n    if (query.isActive !== undefined && model.isActive !== query.isActive) return false;\n    if (query.category && model.category !== query.category) return false;\n    if (query.type && model.type !== query.type) return false;\n    if (query.isFeatured && !model.isFeatured) return false;\n    return true;\n  });\n};\n\nAIModel.findById = async (id) => {\n  return mockAIModels.find(model => model._id === id);\n};\n\n// Mock audio projects\nconst mockAudioProjects = [\n  {\n    _id: 'project1',\n    title: 'Демо проект 1',\n    description: 'Тестовый аудио проект',\n    owner: 'user1',\n    isPublic: true,\n    tracks: [],\n    duration: 0,\n    bpm: 120,\n    addTrack: async function(track) {\n      this.tracks.push(track);\n      return this;\n    },\n    removeTrack: async function(trackId) {\n      this.tracks = this.tracks.filter(t => t._id !== trackId);\n      return this;\n    },\n    updateTrack: async function(trackId, trackData) {\n      const index = this.tracks.findIndex(t => t._id === trackId);\n      if (index !== -1) {\n        this.tracks[index] = { ...this.tracks[index], ...trackData };\n      }\n      return this;\n    },\n    export: async function(format, quality) {\n      return {\n        url: `https://example.com/export_${this._id}.${format || 'mp3'}`,\n        format: format || 'mp3',\n        quality: quality || 'high',\n        duration: this.duration,\n        fileSize: 1000000,\n        createdAt: new Date()\n      };\n    },\n    save: async function() {\n      return this;\n    }\n  }\n];\n\n// Mock methods for AudioProject\nAudioProject.find = async (query) => {\n  return mockAudioProjects;\n};\n\nAudioProject.findById = async (id) => {\n  return mockAudioProjects.find(project => project._id === id);\n};\n\n// Import routes\nconst authRoutes = require('./routes/auth');\nconst audioRoutes = require('./routes/audio');\nconst aiRoutes = require('./routes/ai');\n// Uncomment these when the routes are implemented\n// const videoRoutes = require('./routes/video');\n// const avatarRoutes = require('./routes/avatar');\n// const sceneRoutes = require('./routes/scene');\n// const streamRoutes = require('./routes/stream');\n\n// Security middleware\n// app.use(helmet());\napp.use(cors({\n  origin: process.env.NODE_ENV === 'production' \n    ? process.env.FRONTEND_URL \n    : ['http://localhost:3000', 'http://localhost:3001'],\n  credentials: true\n}));\n\n// Rate limiting - commented out temporarily\n// const apiLimiter = rateLimit({\n//   windowMs: 15 * 60 * 1000, // 15 minutes\n//   max: 100, // limit each IP to 100 requests per windowMs\n//   standardHeaders: true,\n//   legacyHeaders: false,\n//   message: {\n//     status: 429,\n//     error: 'Too many requests, please try again later.'\n//   }\n// });\n\n// Apply rate limiting to API routes\n// app.use('/api/', apiLimiter);\n\n// Body parsing middleware\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: true, limit: '50mb' }));\n\n// Static files\napp.use(express.static(path.join(__dirname, 'client')));\n\n// API Routes\napp.use('/api/auth', authRoutes);\napp.use('/api/audio', audioRoutes);\napp.use('/api/ai', aiRoutes);\n// Uncomment these when the routes are implemented\n// app.use('/api/video', videoRoutes);\n// app.use('/api/avatar', avatarRoutes);\n// app.use('/api/scene', sceneRoutes);\n// app.use('/api/stream', streamRoutes);\n\n// Base route\napp.get('/', (req, res) => {\n  res.sendFile(path.join(__dirname, 'client', 'index.html'));\n});\n\n// API info route\napp.get('/api', (req, res) => {\n  res.json({ \n    message: 'EdAiVi Studio API запущен!',\n    version: '1.0.0',\n    status: 'working',\n    timestamp: new Date().toISOString(),\n    endpoints: [\n      'GET /',\n      'GET /api/status',\n      'POST /api/auth/login',\n      'POST /api/auth/register',\n      'GET /api/auth/profile',\n      'GET /api/audio',\n      'GET /api/video',\n      'GET /api/avatar',\n      'GET /api/scene',\n      'GET /api/stream',\n      'GET /api/ai'\n    ]\n  });\n});\n\n// Server status\napp.get('/api/status', (req, res) => {\n  res.json({\n    status: 'online',\n    uptime: process.uptime(),\n    memory: process.memoryUsage(),\n    environment: process.env.NODE_ENV || 'development',\n    mongodb: mongoose.connection.readyState === 1 ? 'connected' : 'disconnected',\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Socket.IO setup\nio.on('connection', (socket) => {\n  console.log(`🔌 Socket connected: ${socket.id}`);\n  \n  // Join room (for project collaboration, streaming, etc.)\n  socket.on('join-room', (roomId, userId) => {\n    socket.join(roomId);\n    socket.to(roomId).emit('user-connected', userId);\n    console.log(`👤 User ${userId} joined room ${roomId}`);\n  });\n  \n  // Leave room\n  socket.on('leave-room', (roomId, userId) => {\n    socket.leave(roomId);\n    socket.to(roomId).emit('user-disconnected', userId);\n    console.log(`👤 User ${userId} left room ${roomId}`);\n  });\n  \n  // Chat message\n  socket.on('chat-message', (roomId, message) => {\n    socket.to(roomId).emit('chat-message', message);\n  });\n  \n  // Project update\n  socket.on('project-update', (roomId, update) => {\n    socket.to(roomId).emit('project-update', update);\n  });\n  \n  // Stream events\n  socket.on('stream-event', (streamId, event) => {\n    socket.to(streamId).emit('stream-event', event);\n  });\n  \n  // Disconnect\n  socket.on('disconnect', () => {\n    console.log(`🔌 Socket disconnected: ${socket.id}`);\n  });\n});\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({ \n    error: 'Маршрут не найден',\n    path: req.originalUrl,\n    method: req.method,\n    timestamp: new Date().toISOString(),\n    availableRoutes: [\n      'GET /',\n      'GET /api/status',\n      'POST /api/auth/login',\n      'POST /api/auth/register',\n      'GET /api/auth/profile',\n      'GET /api/audio',\n      'GET /api/video',\n      'GET /api/avatar',\n      'GET /api/scene',\n      'GET /api/stream',\n      'GET /api/ai'\n    ]\n  });\n});\n\n// Global error handler\napp.use((err, req, res, next) => {\n  console.error('❌ Ошибка сервера:', err.stack);\n  res.status(500).json({ \n    error: 'Внутренняя ошибка сервера',\n    message: err.message,\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Start server\nhttpServer.listen(PORT, () => {\n  console.log('='.repeat(50));\n  console.log(`🚀 Сервер EdAiVi Studio запущен!`);\n  console.log(`📡 Порт: ${PORT}`);\n  console.log(`🌐 URL: http://localhost:${PORT}`);\n  console.log(`⏰ Время запуска: ${new Date().toLocaleString()}`);\n  console.log(`🔌 Socket.IO активен`);\n  console.log(`🌍 Окружение: ${process.env.NODE_ENV || 'development'}`);\n  console.log('='.repeat(50));\n  console.log('📋 Доступные маршруты:');\n  console.log(`   GET  http://localhost:${PORT}/`);\n  console.log(`   GET  http://localhost:${PORT}/api/status`);\n  console.log(`   POST http://localhost:${PORT}/api/auth/login`);\n  console.log(`   POST http://localhost:${PORT}/api/auth/register`);\n  console.log(`   GET  http://localhost:${PORT}/api/auth/profile`);\n  console.log(`   GET  http://localhost:${PORT}/api/audio`);\n  console.log(`   GET  http://localhost:${PORT}/api/video`);\n  console.log(`   GET  http://localhost:${PORT}/api/avatar`);\n  console.log(`   GET  http://localhost:${PORT}/api/scene`);\n  console.log(`   GET  http://localhost:${PORT}/api/stream`);\n  console.log(`   GET  http://localhost:${PORT}/api/ai`);\n  console.log('='.repeat(50));\n});\n\nmodule.exports = app;\n"]}